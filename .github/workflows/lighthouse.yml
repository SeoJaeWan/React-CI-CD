name: Lighthouse CI

on:
  pull_request_target:
    branches: [develop]

jobs:
  lhci:
    name: "Lighthouse Test"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        node-version: ["18.x"]

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Use Node.js ${{ matrix.node-version }} & Caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{matrix.node-version}}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run Build
        run:
          yarn build

          # Desktop 설정으로 Lighthouse 측정
      - name: Run Lighthouse CI for Desktop
        # secrets에 저장한 LHCI_GITHUB_APP_TOKEN 값 사용
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

        # Lighthouse CI를 전역으로 설치
        # lighthouserc-desktop.js 설정 파일에 따라 Lighthouse 데이터 수집
        # lighthouserc-desktop.js 설정 파일에 따라 수집된 데이터 업로드
        # 실패 시 'Fail to Run Lighthouse CI 💦' 출력
        run: |
          npm install -g @lhci/cli
          lhci collect --config=lighthouserc-desktop.js || echo 'Fail to Run Lighthouse CI 💦'
          lhci upload --config=lighthouserc-desktop.js || echo 'Fail to Run Lighthouse CI 💦'

      # Mobile 설정으로 Lighthouse 측정
      - name: Run Lighthouse CI for Mobile
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

        # lighthouserc-mobile.js 설정 파일에 따라 Lighthouse 데이터 수집
        # lighthouserc-mobile.js 설정 파일에 따라 수집된 데이터 업로드
        # 실패 시 'Fail to Run Lighthouse CI 💦' 출력
        run: |
          lhci collect --config=lighthouserc-mobile.js || echo 'Fail to Run Lighthouse CI 💦'
          lhci upload --config=lighthouserc-mobile.js || echo 'Fail to Run Lighthouse CI 💦'

          # Lighthouse 결과를 PR Comment에 작성할 형식대로 포맷팅

    #   - name: Format lighthouse score
    #     id: format_lighthouse_score
    #     uses: actions/github-script@v7
    #     with:
    #       script: |
    #         // Lighthouse 측정 결과 파일을 읽어오기 위해 'fs' import
    #         const fs = require('fs');
    #         const { getLhciPageNameFromUrl, LHCI_GREEN_MIN_SCORE, LHCI_ORANGE_MIN_SCORE, LHCI_RED_MIN_SCORE } = require('./src/configs/lighthouse/Lighthouse.js');

    #         // 점수를 받아서 해당 점수의 색상을 리턴해주는 함수
    #         const getColor = (score) => {
    #           if (score >= LHCI_GREEN_MIN_SCORE) return '🟢';
    #           else if (score >= LHCI_ORANGE_MIN_SCORE) return '🟠';
    #           return '🔴';
    #         }

    #         // 점수를 받아서 색상 + 점수를 리턴해주는 함수들
    #         // Performance, Accessibility, Best Practices, SEO, PWA에 적용됨
    #         const getAuditColorAndScore = (score) => getColor(score) + score;

    #         // Performance 하위 지표인 FCP, LCP, Speed Index, TBT, CLS에 적용됨
    #         const getPerformanceMetricColorAndScore = (category) => getColor(category.score * 100) + category.displayValue;

    #         // 점수는 0-1의 숫자로 표현되기 때문에 100을 곱해주는 함수 필요
    #         const formatResult = (res) => Math.round(res * 100);

    #         // Lighthouse 결과가 저장된 파일에서 내용을 읽어옴
    #         // path는 '{Github Actions 러너의 기본 디렉토리}/{GitHub Actions가 클론한 레포지토리가 위치한 경로}/{GitHub Actions 워크플로우에서 접근하려는 실제 파일 경로}'
    #         const desktopResults = JSON.parse(fs.readFileSync(''));
    #         const mobileResults = JSON.parse(fs.readFileSync(''));

    #         // Lighthouse를 측정한 시간 (Google Spreadsheet 기록 용도)
    #         const monitoringTime = new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' });

    #         // PR Comment에 작성될 색상별 점수 기준
    #         const scoreDescription = `> 🟢: ${LHCI_GREEN_MIN_SCORE} - 100` + ' / ' + `🟠: ${LHCI_ORANGE_MIN_SCORE} - ${LHCI_GREEN_MIN_SCORE - 1}` + ' / ' + `🔴: ${LHCI_RED_MIN_SCORE} - ${LHCI_ORANGE_MIN_SCORE - 1}`;

    #         // PR Comment에 작성될 comments 변수
    #         let comments = '';

    #         // comments에 Comment 제목과 점수 기준 추가
    #         comments += `### Lighthouse report ✨\n`;
    #         comments += `${scoreDescription}\n\n`;

    #         // Google SpreadSheet에 기록될 scores 객체
    #         const scores = { desktop: {}, mobile: {} };
